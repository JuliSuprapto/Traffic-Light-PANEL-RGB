#include <avr/pgmspace.h>
#include <stdlib.h>
#include <SPI.h>
#include <SoftwareSerial.h>
#include <assert.h>
#define R 11 // Uno PD2
#define LAT 12  // Uno PD3
#define CLK 13  // Uno PD4
#define B 10 // Uno PD5
#define A 9 // Uno PD6
#define OE 8 // Uno PD7

SoftwareSerial mySerial(2, 3); // RX, TX

int modul;
byte garis;
byte bitPos;
int kecerahan = 1000;
int kegelapan = 10;
int shiftRegKol;
byte kanvas[6][4][16];
long waktu;
byte dx, dy;
String string;
char command;
String readString ="";
char c;

void setup() {
  randomSeed(analogRead(0));
  SPI.begin();
  Serial.begin(9600);
  readString = "";
  pinMode(R, OUTPUT);
  pinMode(CLK, OUTPUT);
  pinMode(LAT, OUTPUT);
  pinMode(OE, OUTPUT);
  pinMode(A, OUTPUT);
  pinMode(B, OUTPUT);
  pinMode(OE, OUTPUT);
  digitalWrite(OE, 1);
}

const byte logoTE [26] [4] PROGMEM = {
  { 255, 255, 243, 192 },
  { 255, 255, 243, 192 },
  { 255, 255, 243, 192 },
  { 255, 255, 243, 192 },
  { 0, 0, 51, 192 },
  { 0, 0, 51, 192 },
  { 255, 63, 51, 192 },
  { 255, 63, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 51, 51, 192 },
  { 243, 243, 243, 192 },
  { 243, 243, 243, 192 },
  { 240, 0, 3, 192 },
  { 240, 0, 3, 192 },
  { 255, 255, 255, 192 },
  { 255, 255, 255, 192 },
  { 255, 255, 255, 192 },
  { 255, 255, 255, 192 },
};

// Menggambar logo Telehouse di koordinat pojok kiri bawah P1(x0, y0)
void cetakLogoTE(const byte x0, const byte y0) {
  int x0i = x0;
  for (byte col = 1; col <= 26; col++) { //membaca kolom pertama dari logo
    byte temp1 = pgm_read_byte (logoTE [col][0]); // baca kolom dari huruf
    for (byte bitPos = 1; bitPos <= 7; bitPos++) {
      if (bit_is_set(temp1, bitPos - 1)) {
        setPixel(x0i + x0 + col,  y0 + 7 - bitPos);
      } // bit_is_set
    }// bitPos
    x0i++;
    temp1 = pgm_read_byte (logoTE [col][1]); // baca kolom dari huruf
    for (byte bitPos = 1; bitPos <= 7; bitPos++) {
      if (bit_is_set(temp1, bitPos - 1)) {
        setPixel(x0i + x0 + col,  y0 + 7 + 8 - bitPos);
      } // bit_is_set
    }// bitPos
    x0i++;
    temp1 = pgm_read_byte (logoTE [col][2]); // baca kolom dari huruf
    for (byte bitPos = 1; bitPos <= 7; bitPos++) {
      if (bit_is_set(temp1, bitPos - 1)) {
        setPixel(x0i + x0 + col,  y0 + 7 + 16 - bitPos);
      } // bit_is_set
    }// bitPos
    x0i++;
    temp1 = pgm_read_byte (logoTE [col][3]); // baca kolom dari huruf
    for (byte bitPos = 1; bitPos <= 2; bitPos++) {
      if (bit_is_set(temp1, bitPos - 1)) {
        setPixel(x0i + x0 + col,  y0 + 7 + 24 - bitPos);
      } // bit_is_set
    }// bitPos


  } // komplit satu huruf
} // end of cetakLogo

// pola bit font CP437
const byte cp437_font [127] [9] PROGMEM = {
  { 8,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ASCII 0x00
  { 8,  0x7E, 0x81, 0x95, 0xB1, 0xB1, 0x95, 0x81, 0x7E }, // 0x01
  { 8,  0x7E, 0xFF, 0xEB, 0xCF, 0xCF, 0xEB, 0xFF, 0x7E }, // 0x02
  { 7,  0x0E, 0x1F, 0x3F, 0x7E, 0x3F, 0x1F, 0x0E, 0x00 }, // 0x03
  { 7,  0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00 }, // 0x04
  { 7,  0x18, 0xBA, 0xFF, 0xFF, 0xFF, 0xBA, 0x18, 0x00 }, // 0x05
  { 7,  0x10, 0xB8, 0xFC, 0xFF, 0xFC, 0xB8, 0x10, 0x00 }, // 0x06
  { 4,  0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00 }, // 0x07
  { 8,  0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF }, // 0x08
  { 6,  0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, 0x00 }, // 0x09
  { 8,  0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF }, // 0x0A
  { 8,  0x70, 0xF8, 0x88, 0x88, 0xFD, 0x7F, 0x07, 0x0F }, // 0x0B
  { 6,  0x4E, 0x5F, 0xF1, 0xF1, 0x5F, 0x4E, 0x00, 0x00 }, // 0x0C
  { 8,  0xC0, 0xE0, 0xFF, 0x7F, 0x05, 0x05, 0x07, 0x07 }, // 0x0D
  { 8,  0xC0, 0xFF, 0x7F, 0x05, 0x05, 0x65, 0x7F, 0x3F }, // 0x0E
  { 8,  0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99 }, // 0x0F
  { 7,  0x7F, 0x3E, 0x3E, 0x1C, 0x1C, 0x08, 0x08, 0x00 }, // 0x10
  { 7,  0x08, 0x08, 0x1C, 0x1C, 0x3E, 0x3E, 0x7F, 0x00 }, // 0x11
  { 6,  0x24, 0x66, 0xFF, 0xFF, 0x66, 0x24, 0x00, 0x00 }, // 0x12
  { 6,  0x5F, 0x5F, 0x00, 0x00, 0x5F, 0x5F, 0x00, 0x00 }, // 0x13
  { 8,  0x06, 0x0F, 0x09, 0x7F, 0x7F, 0x01, 0x7F, 0x7F }, // 0x14
  { 8,  0x40, 0xDA, 0xBF, 0xA5, 0xFD, 0x59, 0x03, 0x02 }, // 0x15
  { 6,  0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00 }, // 0x16
  { 8,  0x80, 0x94, 0xB6, 0xFF, 0xFF, 0xB6, 0x94, 0x80 }, // 0x17
  { 6,  0x04, 0x06, 0x7F, 0x7F, 0x06, 0x04, 0x00, 0x00 }, // 0x18
  { 6,  0x10, 0x30, 0x7F, 0x7F, 0x30, 0x10, 0x00, 0x00 }, // 0x19
  { 7,  0x08, 0x08, 0x08, 0x2A, 0x3E, 0x1C, 0x08, 0x00 }, // 0x1A
  { 7,  0x08, 0x1C, 0x3E, 0x2A, 0x08, 0x08, 0x08, 0x00 }, // 0x1B
  { 7,  0x3C, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00 }, // 0x1C
  { 8,  0x08, 0x1C, 0x3E, 0x08, 0x08, 0x3E, 0x1C, 0x08 }, // 0x1D
  { 8,  0x30, 0x38, 0x3C, 0x3E, 0x3E, 0x3C, 0x38, 0x30 }, // 0x1E
  { 8,  0x06, 0x0E, 0x1E, 0x3E, 0x3E, 0x1E, 0x0E, 0x06 }, // 0x1F
  { 1,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ' '
  { 4,  0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00, 0x00, 0x00 }, // '!'
  { 5,  0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00 }, // '"'
  { 7,  0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00 }, // '#'
  { 6,  0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00 }, // '$'
  { 7,  0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00 }, // '%'
  { 7,  0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00 }, // '&'
  { 3,  0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, // '''
  { 4,  0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00, 0x00 }, // '('
  { 4,  0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00, 0x00 }, // ')'
  { 8,  0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08 }, // '*'
  { 6,  0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00 }, // '+'
  { 3,  0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ','
  { 6,  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00 }, // '-'
  { 2,  0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // '.'
  { 7,  0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 }, // '/'
  { 7,  0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00 }, // '0'
  { 6,  0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00 }, // '1'
  { 6,  0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00 }, // '2'
  { 6,  0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 }, // '3'
  { 7,  0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00 }, // '4'
  { 6,  0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00 }, // '5'
  { 6,  0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00 }, // '6'
  { 6,  0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00 }, // '7'
  { 6,  0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 }, // '8'
  { 6,  0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00 }, // '9'
  { 2,  0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ':'
  { 3,  0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ';'
  { 5,  0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00 }, // '<'
  { 6,  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00 }, // '='
  { 5,  0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00, 0x00 }, // '>'
  { 6,  0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00 }, // '?'
  { 7,  0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x1E, 0x00 }, // '@'
  { 6,  0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00 }, // 'A'
  { 7,  0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00 }, // 'B'
  { 7,  0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00 }, // 'C'
  { 7,  0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00 }, // 'D'
  { 7,  0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00 }, // 'E'
  { 7,  0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00 }, // 'F'
  { 7,  0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00 }, // 'G'
  { 7,  0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00 }, // 'H'
  { 4,  0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00 }, // 'I'
  { 7,  0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00 }, // 'J'
  { 7,  0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00 }, // 'K'
  { 7,  0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00 }, // 'L'
  { 7,  0x7F, 0x7F, 0x0E, 0x1C, 0x0E, 0x7F, 0x7F, 0x00 }, // 'M'
  { 7,  0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00 }, // 'N'
  { 7,  0x1C, 0x3E, 0x63, 0x41, 0x63, 0x3E, 0x1C, 0x00 }, // 'O'
  { 7,  0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00 }, // 'P'
  { 6,  0x1E, 0x3F, 0x21, 0x71, 0x7F, 0x5E, 0x00, 0x00 }, // 'Q'
  { 7,  0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00 }, // 'R'
  { 6,  0x26, 0x6F, 0x4D, 0x59, 0x73, 0x32, 0x00, 0x00 }, // 'S'
  { 6,  0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00 }, // 'T'
  { 6,  0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00 }, // 'U'
  { 6,  0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00 }, // 'V'
  { 7,  0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00 }, // 'W'
  { 7,  0x43, 0x67, 0x3C, 0x18, 0x3C, 0x67, 0x43, 0x00 }, // 'X'
  { 6,  0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00 }, // 'Y'
  { 7,  0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00 }, // 'Z'
  { 4,  0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00 }, // '['
  { 7,  0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00 }, // backslash
  { 4,  0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00 }, // ']'
  { 7,  0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00 }, // '^'
  { 8,  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 }, // '_'
  { 3,  0x03, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 }, // '`'
  { 7,  0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00 }, // 'a'
  { 7,  0x41, 0x7F, 0x3F, 0x48, 0x48, 0x78, 0x30, 0x00 }, // 'b'
  { 6,  0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00, 0x00 }, // 'c'
  { 7,  0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00 }, // 'd'
  { 6,  0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00, 0x00 }, // 'e'
  { 6,  0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00, 0x00 }, // 'f'
  { 7,  0x98, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00 }, // 'g'
  { 7,  0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00 }, // 'h'
  { 4,  0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00, 0x00 }, // 'i'
  { 6,  0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D, 0x00, 0x00 }, // 'j'
  { 7,  0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00 }, // 'k'
  { 4,  0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00 }, // 'l'
  { 7,  0x7C, 0x7C, 0x18, 0x38, 0x1C, 0x7C, 0x78, 0x00 }, // 'm'
  { 6,  0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00, 0x00 }, // 'n'
  { 6,  0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00, 0x00 }, // 'o'
  { 7,  0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00 }, // 'p'
  { 7,  0x18, 0x3C, 0x24, 0xA4, 0xF8, 0xFC, 0x84, 0x00 }, // 'q'
  { 7,  0x44, 0x7C, 0x78, 0x4C, 0x04, 0x1C, 0x18, 0x00 }, // 'r'
  { 6,  0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00, 0x00 }, // 's'
  { 5,  0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00, 0x00 }, // 't'
  { 7,  0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00 }, // 'u'
  { 7,  0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00, 0x00 }, // 'v'
  { 7,  0x3C, 0x7C, 0x70, 0x38, 0x70, 0x7C, 0x3C, 0x00 }, // 'w'
  { 7,  0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00 }, // 'x'
  { 6,  0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00 }, // 'y'
  { 6,  0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00 }, // 'z'
  { 6,  0x08, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00, 0x00 }, // '{'
  { 2,  0x77, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // '|'
  { 6,  0x41, 0x41, 0x77, 0x3E, 0x08, 0x08, 0x00, 0x00 }, // '}'
  { 7,  0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00 }, // '~'
};  //  end of cp437_font

void cetakString(const char * s, const byte x0, const byte y0) {
  int x0i = x0;
  byte bitPos, column;
  char c;
  while (c = *s++) {
    byte jmlByte = pgm_read_byte (&cp437_font [c] [0]); // baca kolom dari huruf
    for (byte col = 1; col <= jmlByte; col++) { //membaca byte pertama dari huruf c
      byte temp1 = pgm_read_byte (&cp437_font [c] [col]); // baca kolom dari huruf
      for (byte bitPos = 1; bitPos <= 8; bitPos++) {
        if (bit_is_set(temp1, bitPos - 1)) {
          setPixel(x0i + col - 1,  y0 + 7 - bitPos);
        } // bit_is_set
      }// bitPos
      //x0i++;
    } // komplit satu huruf
    x0i += jmlByte + 1; // geser kanan satu huruf bila boleh
  } // komplit satu string huruf
} // end of cetakString

void setPixel(byte absis, byte ordinat) {
  modul = int(ordinat / 16) * 3 + int(absis / 32);
  shiftRegKol = (int (absis / 8) % 4);
  bitPos = 7 - (absis % 8);
  byte row = ordinat % 16;
  kanvas[modul][shiftRegKol][row] |= (1 << bitPos);
}

void resetPixel(byte absis, byte ordinat) {
  modul = int(ordinat / 16) * 3 + int(absis / 32);
  shiftRegKol = (int (absis / 8) % 4);
  bitPos = 7 - (absis % 8);
  byte row = ordinat % 16;
  kanvas[modul][shiftRegKol][row] &= ~(1 << bitPos);
}

void clearKanvas() {
  for (int x = 0; x < 96; x++) {
    for (int y = 0; y < 32; y++)
      resetPixel(x, y);
  }
}

//ukuran kanvasTertata[4][4][16]
// format penataBaris(byteIdx, row)
byte penataBaris[4][16] = {
  {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3},
  {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3},
  {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3},
  {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3},
};

byte penataKolom[4][16] = {
  {0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12},
  {1, 5, 9, 13, 1, 5, 9, 13, 1, 5, 9, 13, 1, 5, 9, 13},
  {2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14},
  {3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15},
};

void cetakKanvas() {
  for (byte gr = 4; gr > 0; gr--) {
    garis = gr - 1 ;
    func1();
  }
}

void func1() {
  digitalWrite(LAT, 0); //
  //digitalWrite(OE, 0); // disable disp
  delayMicroseconds(50);
  digitalWrite(B, bitRead(garis, 1)); //
  digitalWrite(A, bitRead(garis, 0)); //
  for (int modul = 0; modul < 6; modul++) {
    for (shiftRegKol = 0; shiftRegKol < 4; shiftRegKol++) {
      for (int baris = 0; baris < 16; baris += 4) {
        byte temp = kanvas[modul][shiftRegKol][baris + (3 - garis)];
        SPI.transfer(~temp); //
        //shiftOut(R, CLK, MSBFIRST, ~temp);
      }
    }
  } // modul
  digitalWrite(LAT, 1);
  digitalWrite(OE, 1); // enable disp
  delayMicroseconds(kecerahan);
  digitalWrite(OE, 0); // disable disp
}

void gambarCakram(int xP, int yP, int radius) {
  byte xMin = xP - radius;
  byte xMax = xP + radius;
  byte yMin = yP - radius;
  byte yMax = yP + radius;
  for (byte x = xMin; x <= xMax; x++) {
    for (byte y = yMin; y <= yMax; y++) {
      float jarakSqr = (x - xP) * (x - xP) + (y - yP) * (y - yP);
      if ((jarakSqr - (radius * radius)) <= 1) setPixel(x, y);
    }
  }
}

void hapusCakram(int xP, int yP, int radius) {
  byte xMin = xP - radius;
  byte xMax = xP + radius;
  byte yMin = yP - radius;
  byte yMax = yP + radius;
  for (byte x = xMin; x <= xMax; x++) {
    for (byte y = yMin; y <= yMax; y++) {
      float jarakSqr = (x - xP) * (x - xP) + (y - yP) * (y - yP);
      if ((jarakSqr - (radius * radius)) <= 1) resetPixel(x, y);
    }
  }
}

void loop()
{
  readString = "";
  while(!Serial.available()) {}
  // serial read section 
  while (Serial.available() > 0)
  {      
    delay(10);
    c = (char)Serial.read();  //gets one byte from serial buffer
    readString += c;           
  }
  delay(30);
  if (readString.length() > 0)
  {
    Serial.flush();
    Serial.print("Arduino received: ");
    Serial.print(readString); //see what was received
  }
  //readString ="";
  delay(500);
  Serial.print("\n");
  clearKanvas();
  teks();
}
  String text1 = "";
  String text2 = "";
  String text3 = "";

  char** str_split(char* a_str, const char a_delim)
{
    char** result    = 0;
    size_t count     = 0;
    char* tmp        = a_str;
    char* last_comma = 0;
    char delim[2];
    delim[0] = a_delim;
    delim[1] = 0;

    /* Count how many elements will be extracted. */
    while (*tmp)
    {
        if (a_delim == *tmp)
        {
            count++;
            last_comma = tmp;
        }
        tmp++;
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;

    result = malloc(sizeof(char*) * count);

    if (result)
    {
        size_t idx  = 0;
        char* token = strtok(a_str, delim);

        while (token)
        {
            assert(idx < count);
            *(result + idx++) = strdup(token);
            token = strtok(0, delim);
        }
        assert(idx == count - 1);
        *(result + idx) = 0;
    }

    return result;
}

void teks(){ 
  String a ;
  a= "";
  a = readString;
  char* input = &a[0u];
  
  char* input1 ;
  char* input2 ;
  char* input3 ;
    
  char** tokens=str_split(input,'|');
  if (tokens){
     int i;
     for (i = 0; *(tokens + i); i++)
     {     
      input1=*(tokens); 
      input2 =*(tokens+1);
      input3 =*(tokens+2);
     }
     printf("\n");
     free(tokens);
 }
    
  char* s= input3;
  char* s1= input1;
  char* s2= input2;
  String x = s;
  String x1 = s1;
  String x2 = s2;
  int    z = x.length();  
  int    z1 = x1.length();  
  int    z2 = x2.length();  
  
  waktu = millis();

  switch(z1){    
    case 13: cetakString(s1, 3, 23);
    break;
    case 12: cetakString(s1, 6, 23);
    break;
    case 11: cetakString(s1, 11, 23);
    break;
    case 10: cetakString(s1, 14, 23);
    break;
    case 9: cetakString(s1, 18, 23);
    break;
    case 8: cetakString(s1, 21, 23);
    break;
    case 7: cetakString(s1, 24, 23);
    break;
    case 6: cetakString(s1, 27, 23);
    break;
    case 5: cetakString(s1, 31, 23);
    break;
    case 4: cetakString(s1, 35, 23);
    break;
    case 3: cetakString(s1, 38, 23);
    break;
  }

  switch(z){
    case 13: cetakString(s, 3, 1);
    break;
    case 12: cetakString(s, 6, 1);
    break;
    case 11: cetakString(s, 11, 1);
    break;
    case 10: cetakString(s, 14, 1);
    break;
    case 9: cetakString(s, 18, 1);
    break;
    case 8: cetakString(s, 21, 1);
    break;
    case 7: cetakString(s, 24, 1);
    break;
    case 6: cetakString(s, 27, 1);
    break;
    case 5: cetakString(s, 31, 1);
    break;
    case 4: cetakString(s, 35, 1);
    break;
    case 3: cetakString(s, 38, 1);
    break;
  }

  switch(z2){
    case 13: cetakString(s2, 3, 12);
    break;
    case 12: cetakString(s2, 6, 12);
    break;
    case 11: cetakString(s2, 11, 12);
    break;
    case 10: cetakString(s2, 14, 12);
    break;
    case 9: cetakString(s2, 18, 12);
    break;
    case 8: cetakString(s2, 21, 12);
    break;
    case 7: cetakString(s2, 24, 12);
    break;
    case 6: cetakString(s2, 27, 12);
    break;
    case 5: cetakString(s2, 31, 12);
    break;
    case 4: cetakString(s2, 35, 12);
    break;
    case 3: cetakString(s2, 38, 12);
    break;
  }

  while ((millis() - waktu) > 5000) cetakKanvas();
  for (int z = 0; z<1000; z++) {  
  dx = random(2); dy = random(2);
  cetakKanvas();   
  }  
}
